knitr::opts_chunk$set(echo = TRUE)
tweets %>% head(3) %>% strtrim(70)
load("trump_tweets_df.rda")
load(url("http://varianceexplained.org/files/trump_tweets_df.rda"))
tweets <- trump_tweets_df$text
tweets %>% head(3) %>% strtrim(70)
library(purrr)
suppressMessages(library(dplyr))
tweets %>% head(3) %>% strtrim(70)
# Define Trump Android words!
regex <- "badly|crazy|weak|spent|strong|dumb|joke|guns|funny|dead"
# Chose only certain tweets that have necessary complexity
tweets <- tweets[c(1, 2, 5, 6, 198, 347, 919)]
tweets %>% strtrim(70)
matches <- gregexpr(regex, tweets)
str(matches)
matches[[7]]
match_length <- matches.length()
match_length <- matches[[7]].length()
match_length <- matches[[7]].length
m <- matches[[7]]
# matches is a list, one element per each element of tweets
# Each element is an integer vector.
#   Its -1 if no matches found.
#   Holds the position(s) of the first character of each match, otherwise.
# Each element has two attributes. Consider match.length. Let us not speak of the other one.
#   Its -1 if no matches found.
#   Holds the length(s) of each match, otherwise.
m <- matches[[7]]
attr(m, which = "match.length")
lens <- function(x) attr(x, which = "match.length")
map(matches, lens)
m <- matches[[1]]
sum(m > 0)
m <- matches[[7]]
sum(m > 0)
f <- function(x) sum(x > 0)
map(matches, f)
androidWords <- function(x) sum(x > 0)
map(matches, androidWords)
map_int(matches, androidWords)
tibble(
naive_length = lengths(matches),
n_words = map_int(matches, ~ sum(.x > 0))
)
tibble(
naive_length = lengths(matches),
n_words = map_int(matches, androidWords)
)
(match_first <- map(matches, as.vector))
(tweet <- tweets[7])
(t_first <- match_first[[7]])
#> [1] "The Cruz-Kasich pact is under great strain. This joke of a deal is falling apart, not being honored and almost dead. Very dumb!"
(t_first <- match_first[[7]])
#> [1]  50 112 123
(t_length <- match_length[[7]])
#> [1]  50 112 123
(t_length <- match_length[[7]])
# or
(match_length <- map(matches, attr, which = "match.length"))
#> [1]  50 112 123
(t_length <- match_length[[7]])
#> [1] 4 4 4
(t_last <- t_first + t_length - 1)
#> [1]  53 115 126
substring(tweet, t_first, t_last)
(tweet <- tweets[1])
#> [1] "My economic policy speech will be carried live at 12:15 P.M. Enjoy!"
(t_first <- match_first[[1]])
#> [1] -1
(t_length <- match_length[[1]])
#> [1] -1
(t_last <- t_first + t_length - 1)
#> [1] -3
substring(tweet, t_first, t_last)
# first  <- an element of matches
# length <- an element of match_length
# last   <- first + length - 1
(match_last <- map2(match_first, match_length, ~ .x + .y - 1))
pmap(list(text = tweets, first = match_first, last = match_last), substring)
tibble(text = tweets,
first = gregexpr(regex, tweets)) %>%
mutate(match_length = map(first, ~ attr(.x, which = "match.length")),
last = map2(first, match_length, ~ .x + .y - 1)) %>%
select(-match_length) %>%
pmap(substring)
